// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: livekit_rtc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Livekit_SignalTarget: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case publisher // = 0
  case subscriber // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .publisher
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .publisher
    case 1: self = .subscriber
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .publisher: return 0
    case .subscriber: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Livekit_SignalTarget: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Livekit_SignalTarget] = [
    .publisher,
    .subscriber,
  ]
}

#endif  // swift(>=4.2)

enum Livekit_StreamState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case active // = 0
  case paused // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .active
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .active
    case 1: self = .paused
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .active: return 0
    case .paused: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Livekit_StreamState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Livekit_StreamState] = [
    .active,
    .paused,
  ]
}

#endif  // swift(>=4.2)

enum Livekit_CandidateProtocol: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case udp // = 0
  case tcp // = 1
  case tls // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .udp
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .udp
    case 1: self = .tcp
    case 2: self = .tls
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .udp: return 0
    case .tcp: return 1
    case .tls: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Livekit_CandidateProtocol: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Livekit_CandidateProtocol] = [
    .udp,
    .tcp,
    .tls,
  ]
}

#endif  // swift(>=4.2)

struct Livekit_SignalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Livekit_SignalRequest.OneOf_Message? = nil

  /// initial join exchange, for publisher
  var offer: Livekit_SessionDescription {
    get {
      if case .offer(let v)? = message {return v}
      return Livekit_SessionDescription()
    }
    set {message = .offer(newValue)}
  }

  /// participant answering publisher offer
  var answer: Livekit_SessionDescription {
    get {
      if case .answer(let v)? = message {return v}
      return Livekit_SessionDescription()
    }
    set {message = .answer(newValue)}
  }

  var trickle: Livekit_TrickleRequest {
    get {
      if case .trickle(let v)? = message {return v}
      return Livekit_TrickleRequest()
    }
    set {message = .trickle(newValue)}
  }

  var addTrack: Livekit_AddTrackRequest {
    get {
      if case .addTrack(let v)? = message {return v}
      return Livekit_AddTrackRequest()
    }
    set {message = .addTrack(newValue)}
  }

  /// mute the participant's published tracks
  var mute: Livekit_MuteTrackRequest {
    get {
      if case .mute(let v)? = message {return v}
      return Livekit_MuteTrackRequest()
    }
    set {message = .mute(newValue)}
  }

  /// Subscribe or unsubscribe from tracks
  var subscription: Livekit_UpdateSubscription {
    get {
      if case .subscription(let v)? = message {return v}
      return Livekit_UpdateSubscription()
    }
    set {message = .subscription(newValue)}
  }

  /// Update settings of subscribed tracks
  var trackSetting: Livekit_UpdateTrackSettings {
    get {
      if case .trackSetting(let v)? = message {return v}
      return Livekit_UpdateTrackSettings()
    }
    set {message = .trackSetting(newValue)}
  }

  /// Immediately terminate session
  var leave: Livekit_LeaveRequest {
    get {
      if case .leave(let v)? = message {return v}
      return Livekit_LeaveRequest()
    }
    set {message = .leave(newValue)}
  }

  /// Update published video layers
  var updateLayers: Livekit_UpdateVideoLayers {
    get {
      if case .updateLayers(let v)? = message {return v}
      return Livekit_UpdateVideoLayers()
    }
    set {message = .updateLayers(newValue)}
  }

  /// Update subscriber permissions
  var subscriptionPermission: Livekit_SubscriptionPermission {
    get {
      if case .subscriptionPermission(let v)? = message {return v}
      return Livekit_SubscriptionPermission()
    }
    set {message = .subscriptionPermission(newValue)}
  }

  /// sync client's subscribe state to server during reconnect
  var syncState: Livekit_SyncState {
    get {
      if case .syncState(let v)? = message {return v}
      return Livekit_SyncState()
    }
    set {message = .syncState(newValue)}
  }

  /// Simulate conditions, for client validations
  var simulate: Livekit_SimulateScenario {
    get {
      if case .simulate(let v)? = message {return v}
      return Livekit_SimulateScenario()
    }
    set {message = .simulate(newValue)}
  }

  /// client triggered ping to server
  var ping: Int64 {
    get {
      if case .ping(let v)? = message {return v}
      return 0
    }
    set {message = .ping(newValue)}
  }

  /// update a participant's own metadata and/or name
  var updateMetadata: Livekit_UpdateParticipantMetadata {
    get {
      if case .updateMetadata(let v)? = message {return v}
      return Livekit_UpdateParticipantMetadata()
    }
    set {message = .updateMetadata(newValue)}
  }

  var pingReq: Livekit_Ping {
    get {
      if case .pingReq(let v)? = message {return v}
      return Livekit_Ping()
    }
    set {message = .pingReq(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable {
    /// initial join exchange, for publisher
    case offer(Livekit_SessionDescription)
    /// participant answering publisher offer
    case answer(Livekit_SessionDescription)
    case trickle(Livekit_TrickleRequest)
    case addTrack(Livekit_AddTrackRequest)
    /// mute the participant's published tracks
    case mute(Livekit_MuteTrackRequest)
    /// Subscribe or unsubscribe from tracks
    case subscription(Livekit_UpdateSubscription)
    /// Update settings of subscribed tracks
    case trackSetting(Livekit_UpdateTrackSettings)
    /// Immediately terminate session
    case leave(Livekit_LeaveRequest)
    /// Update published video layers
    case updateLayers(Livekit_UpdateVideoLayers)
    /// Update subscriber permissions
    case subscriptionPermission(Livekit_SubscriptionPermission)
    /// sync client's subscribe state to server during reconnect
    case syncState(Livekit_SyncState)
    /// Simulate conditions, for client validations
    case simulate(Livekit_SimulateScenario)
    /// client triggered ping to server
    case ping(Int64)
    /// update a participant's own metadata and/or name
    case updateMetadata(Livekit_UpdateParticipantMetadata)
    case pingReq(Livekit_Ping)

  #if !swift(>=4.1)
    static func ==(lhs: Livekit_SignalRequest.OneOf_Message, rhs: Livekit_SignalRequest.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.offer, .offer): return {
        guard case .offer(let l) = lhs, case .offer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.answer, .answer): return {
        guard case .answer(let l) = lhs, case .answer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.trickle, .trickle): return {
        guard case .trickle(let l) = lhs, case .trickle(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.addTrack, .addTrack): return {
        guard case .addTrack(let l) = lhs, case .addTrack(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mute, .mute): return {
        guard case .mute(let l) = lhs, case .mute(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.subscription, .subscription): return {
        guard case .subscription(let l) = lhs, case .subscription(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.trackSetting, .trackSetting): return {
        guard case .trackSetting(let l) = lhs, case .trackSetting(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.leave, .leave): return {
        guard case .leave(let l) = lhs, case .leave(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.updateLayers, .updateLayers): return {
        guard case .updateLayers(let l) = lhs, case .updateLayers(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.subscriptionPermission, .subscriptionPermission): return {
        guard case .subscriptionPermission(let l) = lhs, case .subscriptionPermission(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.syncState, .syncState): return {
        guard case .syncState(let l) = lhs, case .syncState(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.simulate, .simulate): return {
        guard case .simulate(let l) = lhs, case .simulate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ping, .ping): return {
        guard case .ping(let l) = lhs, case .ping(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.updateMetadata, .updateMetadata): return {
        guard case .updateMetadata(let l) = lhs, case .updateMetadata(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pingReq, .pingReq): return {
        guard case .pingReq(let l) = lhs, case .pingReq(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Livekit_SignalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Livekit_SignalResponse.OneOf_Message? = nil

  /// sent when join is accepted
  var join: Livekit_JoinResponse {
    get {
      if case .join(let v)? = message {return v}
      return Livekit_JoinResponse()
    }
    set {message = .join(newValue)}
  }

  /// sent when server answers publisher
  var answer: Livekit_SessionDescription {
    get {
      if case .answer(let v)? = message {return v}
      return Livekit_SessionDescription()
    }
    set {message = .answer(newValue)}
  }

  /// sent when server is sending subscriber an offer
  var offer: Livekit_SessionDescription {
    get {
      if case .offer(let v)? = message {return v}
      return Livekit_SessionDescription()
    }
    set {message = .offer(newValue)}
  }

  /// sent when an ICE candidate is available
  var trickle: Livekit_TrickleRequest {
    get {
      if case .trickle(let v)? = message {return v}
      return Livekit_TrickleRequest()
    }
    set {message = .trickle(newValue)}
  }

  /// sent when participants in the room has changed
  var update: Livekit_ParticipantUpdate {
    get {
      if case .update(let v)? = message {return v}
      return Livekit_ParticipantUpdate()
    }
    set {message = .update(newValue)}
  }

  /// sent to the participant when their track has been published
  var trackPublished: Livekit_TrackPublishedResponse {
    get {
      if case .trackPublished(let v)? = message {return v}
      return Livekit_TrackPublishedResponse()
    }
    set {message = .trackPublished(newValue)}
  }

  /// Immediately terminate session
  var leave: Livekit_LeaveRequest {
    get {
      if case .leave(let v)? = message {return v}
      return Livekit_LeaveRequest()
    }
    set {message = .leave(newValue)}
  }

  /// server initiated mute
  var mute: Livekit_MuteTrackRequest {
    get {
      if case .mute(let v)? = message {return v}
      return Livekit_MuteTrackRequest()
    }
    set {message = .mute(newValue)}
  }

  /// indicates changes to speaker status, including when they've gone to not speaking
  var speakersChanged: Livekit_SpeakersChanged {
    get {
      if case .speakersChanged(let v)? = message {return v}
      return Livekit_SpeakersChanged()
    }
    set {message = .speakersChanged(newValue)}
  }

  /// sent when metadata of the room has changed
  var roomUpdate: Livekit_RoomUpdate {
    get {
      if case .roomUpdate(let v)? = message {return v}
      return Livekit_RoomUpdate()
    }
    set {message = .roomUpdate(newValue)}
  }

  /// when connection quality changed
  var connectionQuality: Livekit_ConnectionQualityUpdate {
    get {
      if case .connectionQuality(let v)? = message {return v}
      return Livekit_ConnectionQualityUpdate()
    }
    set {message = .connectionQuality(newValue)}
  }

  /// when streamed tracks state changed, used to notify when any of the streams were paused due to
  /// congestion
  var streamStateUpdate: Livekit_StreamStateUpdate {
    get {
      if case .streamStateUpdate(let v)? = message {return v}
      return Livekit_StreamStateUpdate()
    }
    set {message = .streamStateUpdate(newValue)}
  }

  /// when max subscribe quality changed, used by dynamic broadcasting to disable unused layers
  var subscribedQualityUpdate: Livekit_SubscribedQualityUpdate {
    get {
      if case .subscribedQualityUpdate(let v)? = message {return v}
      return Livekit_SubscribedQualityUpdate()
    }
    set {message = .subscribedQualityUpdate(newValue)}
  }

  /// when subscription permission changed
  var subscriptionPermissionUpdate: Livekit_SubscriptionPermissionUpdate {
    get {
      if case .subscriptionPermissionUpdate(let v)? = message {return v}
      return Livekit_SubscriptionPermissionUpdate()
    }
    set {message = .subscriptionPermissionUpdate(newValue)}
  }

  /// update the token the client was using, to prevent an active client from using an expired token
  var refreshToken: String {
    get {
      if case .refreshToken(let v)? = message {return v}
      return String()
    }
    set {message = .refreshToken(newValue)}
  }

  /// server initiated track unpublish
  var trackUnpublished: Livekit_TrackUnpublishedResponse {
    get {
      if case .trackUnpublished(let v)? = message {return v}
      return Livekit_TrackUnpublishedResponse()
    }
    set {message = .trackUnpublished(newValue)}
  }

  /// respond to ping
  var pong: Int64 {
    get {
      if case .pong(let v)? = message {return v}
      return 0
    }
    set {message = .pong(newValue)}
  }

  /// sent when client reconnects
  var reconnect: Livekit_ReconnectResponse {
    get {
      if case .reconnect(let v)? = message {return v}
      return Livekit_ReconnectResponse()
    }
    set {message = .reconnect(newValue)}
  }

  /// respond to Ping
  var pongResp: Livekit_Pong {
    get {
      if case .pongResp(let v)? = message {return v}
      return Livekit_Pong()
    }
    set {message = .pongResp(newValue)}
  }

  /// Subscription response, client should not expect any media from this subscription if it fails
  var subscriptionResponse: Livekit_SubscriptionResponse {
    get {
      if case .subscriptionResponse(let v)? = message {return v}
      return Livekit_SubscriptionResponse()
    }
    set {message = .subscriptionResponse(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable {
    /// sent when join is accepted
    case join(Livekit_JoinResponse)
    /// sent when server answers publisher
    case answer(Livekit_SessionDescription)
    /// sent when server is sending subscriber an offer
    case offer(Livekit_SessionDescription)
    /// sent when an ICE candidate is available
    case trickle(Livekit_TrickleRequest)
    /// sent when participants in the room has changed
    case update(Livekit_ParticipantUpdate)
    /// sent to the participant when their track has been published
    case trackPublished(Livekit_TrackPublishedResponse)
    /// Immediately terminate session
    case leave(Livekit_LeaveRequest)
    /// server initiated mute
    case mute(Livekit_MuteTrackRequest)
    /// indicates changes to speaker status, including when they've gone to not speaking
    case speakersChanged(Livekit_SpeakersChanged)
    /// sent when metadata of the room has changed
    case roomUpdate(Livekit_RoomUpdate)
    /// when connection quality changed
    case connectionQuality(Livekit_ConnectionQualityUpdate)
    /// when streamed tracks state changed, used to notify when any of the streams were paused due to
    /// congestion
    case streamStateUpdate(Livekit_StreamStateUpdate)
    /// when max subscribe quality changed, used by dynamic broadcasting to disable unused layers
    case subscribedQualityUpdate(Livekit_SubscribedQualityUpdate)
    /// when subscription permission changed
    case subscriptionPermissionUpdate(Livekit_SubscriptionPermissionUpdate)
    /// update the token the client was using, to prevent an active client from using an expired token
    case refreshToken(String)
    /// server initiated track unpublish
    case trackUnpublished(Livekit_TrackUnpublishedResponse)
    /// respond to ping
    case pong(Int64)
    /// sent when client reconnects
    case reconnect(Livekit_ReconnectResponse)
    /// respond to Ping
    case pongResp(Livekit_Pong)
    /// Subscription response, client should not expect any media from this subscription if it fails
    case subscriptionResponse(Livekit_SubscriptionResponse)

  #if !swift(>=4.1)
    static func ==(lhs: Livekit_SignalResponse.OneOf_Message, rhs: Livekit_SignalResponse.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.join, .join): return {
        guard case .join(let l) = lhs, case .join(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.answer, .answer): return {
        guard case .answer(let l) = lhs, case .answer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.offer, .offer): return {
        guard case .offer(let l) = lhs, case .offer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.trickle, .trickle): return {
        guard case .trickle(let l) = lhs, case .trickle(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.update, .update): return {
        guard case .update(let l) = lhs, case .update(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.trackPublished, .trackPublished): return {
        guard case .trackPublished(let l) = lhs, case .trackPublished(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.leave, .leave): return {
        guard case .leave(let l) = lhs, case .leave(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mute, .mute): return {
        guard case .mute(let l) = lhs, case .mute(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.speakersChanged, .speakersChanged): return {
        guard case .speakersChanged(let l) = lhs, case .speakersChanged(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.roomUpdate, .roomUpdate): return {
        guard case .roomUpdate(let l) = lhs, case .roomUpdate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.connectionQuality, .connectionQuality): return {
        guard case .connectionQuality(let l) = lhs, case .connectionQuality(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.streamStateUpdate, .streamStateUpdate): return {
        guard case .streamStateUpdate(let l) = lhs, case .streamStateUpdate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.subscribedQualityUpdate, .subscribedQualityUpdate): return {
        guard case .subscribedQualityUpdate(let l) = lhs, case .subscribedQualityUpdate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.subscriptionPermissionUpdate, .subscriptionPermissionUpdate): return {
        guard case .subscriptionPermissionUpdate(let l) = lhs, case .subscriptionPermissionUpdate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.refreshToken, .refreshToken): return {
        guard case .refreshToken(let l) = lhs, case .refreshToken(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.trackUnpublished, .trackUnpublished): return {
        guard case .trackUnpublished(let l) = lhs, case .trackUnpublished(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pong, .pong): return {
        guard case .pong(let l) = lhs, case .pong(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.reconnect, .reconnect): return {
        guard case .reconnect(let l) = lhs, case .reconnect(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pongResp, .pongResp): return {
        guard case .pongResp(let l) = lhs, case .pongResp(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.subscriptionResponse, .subscriptionResponse): return {
        guard case .subscriptionResponse(let l) = lhs, case .subscriptionResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Livekit_SimulcastCodec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var codec: String = String()

  var cid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_AddTrackRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// client ID of track, to match it when RTC track is received
  var cid: String = String()

  var name: String = String()

  var type: Livekit_TrackType = .audio

  /// to be deprecated in favor of layers
  var width: UInt32 = 0

  var height: UInt32 = 0

  /// true to add track and initialize to muted
  var muted: Bool = false

  /// true if DTX (Discontinuous Transmission) is disabled for audio
  var disableDtx: Bool = false

  var source: Livekit_TrackSource = .unknown

  var layers: [Livekit_VideoLayer] = []

  var simulcastCodecs: [Livekit_SimulcastCodec] = []

  /// server ID of track, publish new codec to exist track
  var sid: String = String()

  var stereo: Bool = false

  /// true if RED (Redundant Encoding) is disabled for audio
  var disableRed: Bool = false

  var encryption: Livekit_Encryption.TypeEnum = .none

  /// which stream the track belongs to, used to group tracks together.
  /// if not specified, server will infer it from track source to bundle camera/microphone, screenshare/audio together
  var stream: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_TrickleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var candidateInit: String = String()

  var target: Livekit_SignalTarget = .publisher

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_MuteTrackRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sid: String = String()

  var muted: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_JoinResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var room: Livekit_Room {
    get {return _storage._room ?? Livekit_Room()}
    set {_uniqueStorage()._room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return _storage._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {_uniqueStorage()._room = nil}

  var participant: Livekit_ParticipantInfo {
    get {return _storage._participant ?? Livekit_ParticipantInfo()}
    set {_uniqueStorage()._participant = newValue}
  }
  /// Returns true if `participant` has been explicitly set.
  var hasParticipant: Bool {return _storage._participant != nil}
  /// Clears the value of `participant`. Subsequent reads from it will return its default value.
  mutating func clearParticipant() {_uniqueStorage()._participant = nil}

  var otherParticipants: [Livekit_ParticipantInfo] {
    get {return _storage._otherParticipants}
    set {_uniqueStorage()._otherParticipants = newValue}
  }

  /// deprecated. use server_info.version instead.
  var serverVersion: String {
    get {return _storage._serverVersion}
    set {_uniqueStorage()._serverVersion = newValue}
  }

  var iceServers: [Livekit_ICEServer] {
    get {return _storage._iceServers}
    set {_uniqueStorage()._iceServers = newValue}
  }

  /// use subscriber as the primary PeerConnection
  var subscriberPrimary: Bool {
    get {return _storage._subscriberPrimary}
    set {_uniqueStorage()._subscriberPrimary = newValue}
  }

  /// when the current server isn't available, return alternate url to retry connection
  /// when this is set, the other fields will be largely empty
  var alternativeURL: String {
    get {return _storage._alternativeURL}
    set {_uniqueStorage()._alternativeURL = newValue}
  }

  var clientConfiguration: Livekit_ClientConfiguration {
    get {return _storage._clientConfiguration ?? Livekit_ClientConfiguration()}
    set {_uniqueStorage()._clientConfiguration = newValue}
  }
  /// Returns true if `clientConfiguration` has been explicitly set.
  var hasClientConfiguration: Bool {return _storage._clientConfiguration != nil}
  /// Clears the value of `clientConfiguration`. Subsequent reads from it will return its default value.
  mutating func clearClientConfiguration() {_uniqueStorage()._clientConfiguration = nil}

  /// deprecated. use server_info.region instead.
  var serverRegion: String {
    get {return _storage._serverRegion}
    set {_uniqueStorage()._serverRegion = newValue}
  }

  var pingTimeout: Int32 {
    get {return _storage._pingTimeout}
    set {_uniqueStorage()._pingTimeout = newValue}
  }

  var pingInterval: Int32 {
    get {return _storage._pingInterval}
    set {_uniqueStorage()._pingInterval = newValue}
  }

  var serverInfo: Livekit_ServerInfo {
    get {return _storage._serverInfo ?? Livekit_ServerInfo()}
    set {_uniqueStorage()._serverInfo = newValue}
  }
  /// Returns true if `serverInfo` has been explicitly set.
  var hasServerInfo: Bool {return _storage._serverInfo != nil}
  /// Clears the value of `serverInfo`. Subsequent reads from it will return its default value.
  mutating func clearServerInfo() {_uniqueStorage()._serverInfo = nil}

  /// Server-Injected-Frame byte trailer, used to identify unencrypted frames when e2ee is enabled
  var sifTrailer: Data {
    get {return _storage._sifTrailer}
    set {_uniqueStorage()._sifTrailer = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Livekit_ReconnectResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iceServers: [Livekit_ICEServer] = []

  var clientConfiguration: Livekit_ClientConfiguration {
    get {return _clientConfiguration ?? Livekit_ClientConfiguration()}
    set {_clientConfiguration = newValue}
  }
  /// Returns true if `clientConfiguration` has been explicitly set.
  var hasClientConfiguration: Bool {return self._clientConfiguration != nil}
  /// Clears the value of `clientConfiguration`. Subsequent reads from it will return its default value.
  mutating func clearClientConfiguration() {self._clientConfiguration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clientConfiguration: Livekit_ClientConfiguration? = nil
}

struct Livekit_TrackPublishedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cid: String = String()

  var track: Livekit_TrackInfo {
    get {return _track ?? Livekit_TrackInfo()}
    set {_track = newValue}
  }
  /// Returns true if `track` has been explicitly set.
  var hasTrack: Bool {return self._track != nil}
  /// Clears the value of `track`. Subsequent reads from it will return its default value.
  mutating func clearTrack() {self._track = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _track: Livekit_TrackInfo? = nil
}

struct Livekit_TrackUnpublishedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trackSid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_SessionDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// "answer" | "offer" | "pranswer" | "rollback"
  var type: String = String()

  var sdp: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_ParticipantUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var participants: [Livekit_ParticipantInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_UpdateSubscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trackSids: [String] = []

  var subscribe: Bool = false

  var participantTracks: [Livekit_ParticipantTracks] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_UpdateTrackSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trackSids: [String] = []

  /// when true, the track is placed in a paused state, with no new data returned
  var disabled: Bool = false

  /// deprecated in favor of width & height
  var quality: Livekit_VideoQuality = .low

  /// for video, width to receive
  var width: UInt32 = 0

  /// for video, height to receive
  var height: UInt32 = 0

  var fps: UInt32 = 0

  /// subscription priority. 1 being the highest (0 is unset)
  /// when unset, server sill assign priority based on the order of subscription
  /// server will use priority in the following ways:
  /// 1. when subscribed tracks exceed per-participant subscription limit, server will
  ///    pause the lowest priority tracks
  /// 2. when the network is congested, server will assign available bandwidth to
  ///    higher priority tracks first. lowest priority tracks can be paused
  var priority: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_LeaveRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sent when server initiates the disconnect due to server-restart
  /// indicates clients should attempt full-reconnect sequence
  var canReconnect: Bool = false

  var reason: Livekit_DisconnectReason = .unknownReason

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// message to indicate published video track dimensions are changing
struct Livekit_UpdateVideoLayers {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trackSid: String = String()

  var layers: [Livekit_VideoLayer] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_UpdateParticipantMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_ICEServer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var urls: [String] = []

  var username: String = String()

  var credential: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_SpeakersChanged {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var speakers: [Livekit_SpeakerInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_RoomUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var room: Livekit_Room {
    get {return _room ?? Livekit_Room()}
    set {_room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return self._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {self._room = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _room: Livekit_Room? = nil
}

struct Livekit_ConnectionQualityInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var participantSid: String = String()

  var quality: Livekit_ConnectionQuality = .poor

  var score: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_ConnectionQualityUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var updates: [Livekit_ConnectionQualityInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_StreamStateInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var participantSid: String = String()

  var trackSid: String = String()

  var state: Livekit_StreamState = .active

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_StreamStateUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var streamStates: [Livekit_StreamStateInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_SubscribedQuality {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var quality: Livekit_VideoQuality = .low

  var enabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_SubscribedCodec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var codec: String = String()

  var qualities: [Livekit_SubscribedQuality] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_SubscribedQualityUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trackSid: String = String()

  var subscribedQualities: [Livekit_SubscribedQuality] = []

  var subscribedCodecs: [Livekit_SubscribedCodec] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_TrackPermission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// permission could be granted either by participant sid or identity
  var participantSid: String = String()

  var allTracks: Bool = false

  var trackSids: [String] = []

  var participantIdentity: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_SubscriptionPermission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var allParticipants: Bool = false

  var trackPermissions: [Livekit_TrackPermission] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_SubscriptionPermissionUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var participantSid: String = String()

  var trackSid: String = String()

  var allowed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_SyncState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// last subscribe answer before reconnecting
  var answer: Livekit_SessionDescription {
    get {return _answer ?? Livekit_SessionDescription()}
    set {_answer = newValue}
  }
  /// Returns true if `answer` has been explicitly set.
  var hasAnswer: Bool {return self._answer != nil}
  /// Clears the value of `answer`. Subsequent reads from it will return its default value.
  mutating func clearAnswer() {self._answer = nil}

  var subscription: Livekit_UpdateSubscription {
    get {return _subscription ?? Livekit_UpdateSubscription()}
    set {_subscription = newValue}
  }
  /// Returns true if `subscription` has been explicitly set.
  var hasSubscription: Bool {return self._subscription != nil}
  /// Clears the value of `subscription`. Subsequent reads from it will return its default value.
  mutating func clearSubscription() {self._subscription = nil}

  var publishTracks: [Livekit_TrackPublishedResponse] = []

  var dataChannels: [Livekit_DataChannelInfo] = []

  /// last received server side offer before reconnecting
  var offer: Livekit_SessionDescription {
    get {return _offer ?? Livekit_SessionDescription()}
    set {_offer = newValue}
  }
  /// Returns true if `offer` has been explicitly set.
  var hasOffer: Bool {return self._offer != nil}
  /// Clears the value of `offer`. Subsequent reads from it will return its default value.
  mutating func clearOffer() {self._offer = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _answer: Livekit_SessionDescription? = nil
  fileprivate var _subscription: Livekit_UpdateSubscription? = nil
  fileprivate var _offer: Livekit_SessionDescription? = nil
}

struct Livekit_DataChannelInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var label: String = String()

  var id: UInt32 = 0

  var target: Livekit_SignalTarget = .publisher

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_SimulateScenario {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scenario: Livekit_SimulateScenario.OneOf_Scenario? = nil

  /// simulate N seconds of speaker activity
  var speakerUpdate: Int32 {
    get {
      if case .speakerUpdate(let v)? = scenario {return v}
      return 0
    }
    set {scenario = .speakerUpdate(newValue)}
  }

  /// simulate local node failure
  var nodeFailure: Bool {
    get {
      if case .nodeFailure(let v)? = scenario {return v}
      return false
    }
    set {scenario = .nodeFailure(newValue)}
  }

  /// simulate migration
  var migration: Bool {
    get {
      if case .migration(let v)? = scenario {return v}
      return false
    }
    set {scenario = .migration(newValue)}
  }

  /// server to send leave
  var serverLeave: Bool {
    get {
      if case .serverLeave(let v)? = scenario {return v}
      return false
    }
    set {scenario = .serverLeave(newValue)}
  }

  /// switch candidate protocol to tcp
  var switchCandidateProtocol: Livekit_CandidateProtocol {
    get {
      if case .switchCandidateProtocol(let v)? = scenario {return v}
      return .udp
    }
    set {scenario = .switchCandidateProtocol(newValue)}
  }

  /// maximum bandwidth for subscribers, in bps
  /// when zero, clears artificial bandwidth limit
  var subscriberBandwidth: Int64 {
    get {
      if case .subscriberBandwidth(let v)? = scenario {return v}
      return 0
    }
    set {scenario = .subscriberBandwidth(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Scenario: Equatable {
    /// simulate N seconds of speaker activity
    case speakerUpdate(Int32)
    /// simulate local node failure
    case nodeFailure(Bool)
    /// simulate migration
    case migration(Bool)
    /// server to send leave
    case serverLeave(Bool)
    /// switch candidate protocol to tcp
    case switchCandidateProtocol(Livekit_CandidateProtocol)
    /// maximum bandwidth for subscribers, in bps
    /// when zero, clears artificial bandwidth limit
    case subscriberBandwidth(Int64)

  #if !swift(>=4.1)
    static func ==(lhs: Livekit_SimulateScenario.OneOf_Scenario, rhs: Livekit_SimulateScenario.OneOf_Scenario) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.speakerUpdate, .speakerUpdate): return {
        guard case .speakerUpdate(let l) = lhs, case .speakerUpdate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.nodeFailure, .nodeFailure): return {
        guard case .nodeFailure(let l) = lhs, case .nodeFailure(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.migration, .migration): return {
        guard case .migration(let l) = lhs, case .migration(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.serverLeave, .serverLeave): return {
        guard case .serverLeave(let l) = lhs, case .serverLeave(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.switchCandidateProtocol, .switchCandidateProtocol): return {
        guard case .switchCandidateProtocol(let l) = lhs, case .switchCandidateProtocol(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.subscriberBandwidth, .subscriberBandwidth): return {
        guard case .subscriberBandwidth(let l) = lhs, case .subscriberBandwidth(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Livekit_Ping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Int64 = 0

  /// rtt in milliseconds calculated by client
  var rtt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_Pong {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// timestamp field of last received ping request
  var lastPingTimestamp: Int64 = 0

  var timestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_RegionSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var regions: [Livekit_RegionInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_RegionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var region: String = String()

  var url: String = String()

  var distance: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Livekit_SubscriptionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trackSid: String = String()

  var err: Livekit_SubscriptionError = .seUnknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Livekit_SignalTarget: @unchecked Sendable {}
extension Livekit_StreamState: @unchecked Sendable {}
extension Livekit_CandidateProtocol: @unchecked Sendable {}
extension Livekit_SignalRequest: @unchecked Sendable {}
extension Livekit_SignalRequest.OneOf_Message: @unchecked Sendable {}
extension Livekit_SignalResponse: @unchecked Sendable {}
extension Livekit_SignalResponse.OneOf_Message: @unchecked Sendable {}
extension Livekit_SimulcastCodec: @unchecked Sendable {}
extension Livekit_AddTrackRequest: @unchecked Sendable {}
extension Livekit_TrickleRequest: @unchecked Sendable {}
extension Livekit_MuteTrackRequest: @unchecked Sendable {}
extension Livekit_JoinResponse: @unchecked Sendable {}
extension Livekit_ReconnectResponse: @unchecked Sendable {}
extension Livekit_TrackPublishedResponse: @unchecked Sendable {}
extension Livekit_TrackUnpublishedResponse: @unchecked Sendable {}
extension Livekit_SessionDescription: @unchecked Sendable {}
extension Livekit_ParticipantUpdate: @unchecked Sendable {}
extension Livekit_UpdateSubscription: @unchecked Sendable {}
extension Livekit_UpdateTrackSettings: @unchecked Sendable {}
extension Livekit_LeaveRequest: @unchecked Sendable {}
extension Livekit_UpdateVideoLayers: @unchecked Sendable {}
extension Livekit_UpdateParticipantMetadata: @unchecked Sendable {}
extension Livekit_ICEServer: @unchecked Sendable {}
extension Livekit_SpeakersChanged: @unchecked Sendable {}
extension Livekit_RoomUpdate: @unchecked Sendable {}
extension Livekit_ConnectionQualityInfo: @unchecked Sendable {}
extension Livekit_ConnectionQualityUpdate: @unchecked Sendable {}
extension Livekit_StreamStateInfo: @unchecked Sendable {}
extension Livekit_StreamStateUpdate: @unchecked Sendable {}
extension Livekit_SubscribedQuality: @unchecked Sendable {}
extension Livekit_SubscribedCodec: @unchecked Sendable {}
extension Livekit_SubscribedQualityUpdate: @unchecked Sendable {}
extension Livekit_TrackPermission: @unchecked Sendable {}
extension Livekit_SubscriptionPermission: @unchecked Sendable {}
extension Livekit_SubscriptionPermissionUpdate: @unchecked Sendable {}
extension Livekit_SyncState: @unchecked Sendable {}
extension Livekit_DataChannelInfo: @unchecked Sendable {}
extension Livekit_SimulateScenario: @unchecked Sendable {}
extension Livekit_SimulateScenario.OneOf_Scenario: @unchecked Sendable {}
extension Livekit_Ping: @unchecked Sendable {}
extension Livekit_Pong: @unchecked Sendable {}
extension Livekit_RegionSettings: @unchecked Sendable {}
extension Livekit_RegionInfo: @unchecked Sendable {}
extension Livekit_SubscriptionResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "livekit"

extension Livekit_SignalTarget: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PUBLISHER"),
    1: .same(proto: "SUBSCRIBER"),
  ]
}

extension Livekit_StreamState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACTIVE"),
    1: .same(proto: "PAUSED"),
  ]
}

extension Livekit_CandidateProtocol: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UDP"),
    1: .same(proto: "TCP"),
    2: .same(proto: "TLS"),
  ]
}

extension Livekit_SignalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignalRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offer"),
    2: .same(proto: "answer"),
    3: .same(proto: "trickle"),
    4: .standard(proto: "add_track"),
    5: .same(proto: "mute"),
    6: .same(proto: "subscription"),
    7: .standard(proto: "track_setting"),
    8: .same(proto: "leave"),
    10: .standard(proto: "update_layers"),
    11: .standard(proto: "subscription_permission"),
    12: .standard(proto: "sync_state"),
    13: .same(proto: "simulate"),
    14: .same(proto: "ping"),
    15: .standard(proto: "update_metadata"),
    16: .standard(proto: "ping_req"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Livekit_SessionDescription?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .offer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .offer(v)
        }
      }()
      case 2: try {
        var v: Livekit_SessionDescription?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .answer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .answer(v)
        }
      }()
      case 3: try {
        var v: Livekit_TrickleRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .trickle(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .trickle(v)
        }
      }()
      case 4: try {
        var v: Livekit_AddTrackRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .addTrack(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .addTrack(v)
        }
      }()
      case 5: try {
        var v: Livekit_MuteTrackRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .mute(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .mute(v)
        }
      }()
      case 6: try {
        var v: Livekit_UpdateSubscription?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .subscription(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .subscription(v)
        }
      }()
      case 7: try {
        var v: Livekit_UpdateTrackSettings?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .trackSetting(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .trackSetting(v)
        }
      }()
      case 8: try {
        var v: Livekit_LeaveRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .leave(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .leave(v)
        }
      }()
      case 10: try {
        var v: Livekit_UpdateVideoLayers?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .updateLayers(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .updateLayers(v)
        }
      }()
      case 11: try {
        var v: Livekit_SubscriptionPermission?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .subscriptionPermission(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .subscriptionPermission(v)
        }
      }()
      case 12: try {
        var v: Livekit_SyncState?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .syncState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .syncState(v)
        }
      }()
      case 13: try {
        var v: Livekit_SimulateScenario?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .simulate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .simulate(v)
        }
      }()
      case 14: try {
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {
          if self.message != nil {try decoder.handleConflictingOneOf()}
          self.message = .ping(v)
        }
      }()
      case 15: try {
        var v: Livekit_UpdateParticipantMetadata?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .updateMetadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .updateMetadata(v)
        }
      }()
      case 16: try {
        var v: Livekit_Ping?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .pingReq(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .pingReq(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .offer?: try {
      guard case .offer(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .answer?: try {
      guard case .answer(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .trickle?: try {
      guard case .trickle(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .addTrack?: try {
      guard case .addTrack(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .mute?: try {
      guard case .mute(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .subscription?: try {
      guard case .subscription(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .trackSetting?: try {
      guard case .trackSetting(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .leave?: try {
      guard case .leave(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .updateLayers?: try {
      guard case .updateLayers(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .subscriptionPermission?: try {
      guard case .subscriptionPermission(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .syncState?: try {
      guard case .syncState(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .simulate?: try {
      guard case .simulate(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .ping?: try {
      guard case .ping(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 14)
    }()
    case .updateMetadata?: try {
      guard case .updateMetadata(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .pingReq?: try {
      guard case .pingReq(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SignalRequest, rhs: Livekit_SignalRequest) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SignalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignalResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "join"),
    2: .same(proto: "answer"),
    3: .same(proto: "offer"),
    4: .same(proto: "trickle"),
    5: .same(proto: "update"),
    6: .standard(proto: "track_published"),
    8: .same(proto: "leave"),
    9: .same(proto: "mute"),
    10: .standard(proto: "speakers_changed"),
    11: .standard(proto: "room_update"),
    12: .standard(proto: "connection_quality"),
    13: .standard(proto: "stream_state_update"),
    14: .standard(proto: "subscribed_quality_update"),
    15: .standard(proto: "subscription_permission_update"),
    16: .standard(proto: "refresh_token"),
    17: .standard(proto: "track_unpublished"),
    18: .same(proto: "pong"),
    19: .same(proto: "reconnect"),
    20: .standard(proto: "pong_resp"),
    21: .standard(proto: "subscription_response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Livekit_JoinResponse?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .join(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .join(v)
        }
      }()
      case 2: try {
        var v: Livekit_SessionDescription?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .answer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .answer(v)
        }
      }()
      case 3: try {
        var v: Livekit_SessionDescription?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .offer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .offer(v)
        }
      }()
      case 4: try {
        var v: Livekit_TrickleRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .trickle(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .trickle(v)
        }
      }()
      case 5: try {
        var v: Livekit_ParticipantUpdate?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .update(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .update(v)
        }
      }()
      case 6: try {
        var v: Livekit_TrackPublishedResponse?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .trackPublished(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .trackPublished(v)
        }
      }()
      case 8: try {
        var v: Livekit_LeaveRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .leave(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .leave(v)
        }
      }()
      case 9: try {
        var v: Livekit_MuteTrackRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .mute(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .mute(v)
        }
      }()
      case 10: try {
        var v: Livekit_SpeakersChanged?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .speakersChanged(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .speakersChanged(v)
        }
      }()
      case 11: try {
        var v: Livekit_RoomUpdate?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .roomUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .roomUpdate(v)
        }
      }()
      case 12: try {
        var v: Livekit_ConnectionQualityUpdate?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .connectionQuality(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .connectionQuality(v)
        }
      }()
      case 13: try {
        var v: Livekit_StreamStateUpdate?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .streamStateUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .streamStateUpdate(v)
        }
      }()
      case 14: try {
        var v: Livekit_SubscribedQualityUpdate?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .subscribedQualityUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .subscribedQualityUpdate(v)
        }
      }()
      case 15: try {
        var v: Livekit_SubscriptionPermissionUpdate?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .subscriptionPermissionUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .subscriptionPermissionUpdate(v)
        }
      }()
      case 16: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.message != nil {try decoder.handleConflictingOneOf()}
          self.message = .refreshToken(v)
        }
      }()
      case 17: try {
        var v: Livekit_TrackUnpublishedResponse?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .trackUnpublished(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .trackUnpublished(v)
        }
      }()
      case 18: try {
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {
          if self.message != nil {try decoder.handleConflictingOneOf()}
          self.message = .pong(v)
        }
      }()
      case 19: try {
        var v: Livekit_ReconnectResponse?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .reconnect(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .reconnect(v)
        }
      }()
      case 20: try {
        var v: Livekit_Pong?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .pongResp(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .pongResp(v)
        }
      }()
      case 21: try {
        var v: Livekit_SubscriptionResponse?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .subscriptionResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .subscriptionResponse(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .join?: try {
      guard case .join(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .answer?: try {
      guard case .answer(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .offer?: try {
      guard case .offer(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .trickle?: try {
      guard case .trickle(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .update?: try {
      guard case .update(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .trackPublished?: try {
      guard case .trackPublished(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .leave?: try {
      guard case .leave(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .mute?: try {
      guard case .mute(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .speakersChanged?: try {
      guard case .speakersChanged(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .roomUpdate?: try {
      guard case .roomUpdate(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .connectionQuality?: try {
      guard case .connectionQuality(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .streamStateUpdate?: try {
      guard case .streamStateUpdate(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .subscribedQualityUpdate?: try {
      guard case .subscribedQualityUpdate(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .subscriptionPermissionUpdate?: try {
      guard case .subscriptionPermissionUpdate(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .refreshToken?: try {
      guard case .refreshToken(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 16)
    }()
    case .trackUnpublished?: try {
      guard case .trackUnpublished(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .pong?: try {
      guard case .pong(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 18)
    }()
    case .reconnect?: try {
      guard case .reconnect(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .pongResp?: try {
      guard case .pongResp(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .subscriptionResponse?: try {
      guard case .subscriptionResponse(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SignalResponse, rhs: Livekit_SignalResponse) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SimulcastCodec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SimulcastCodec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "codec"),
    2: .same(proto: "cid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.codec) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.codec.isEmpty {
      try visitor.visitSingularStringField(value: self.codec, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SimulcastCodec, rhs: Livekit_SimulcastCodec) -> Bool {
    if lhs.codec != rhs.codec {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_AddTrackRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddTrackRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cid"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
    4: .same(proto: "width"),
    5: .same(proto: "height"),
    6: .same(proto: "muted"),
    7: .standard(proto: "disable_dtx"),
    8: .same(proto: "source"),
    9: .same(proto: "layers"),
    10: .standard(proto: "simulcast_codecs"),
    11: .same(proto: "sid"),
    12: .same(proto: "stereo"),
    13: .standard(proto: "disable_red"),
    14: .same(proto: "encryption"),
    15: .same(proto: "stream"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.width) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.height) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.muted) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.disableDtx) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.source) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.layers) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.simulcastCodecs) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.sid) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.stereo) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.disableRed) }()
      case 14: try { try decoder.decodeSingularEnumField(value: &self.encryption) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.stream) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.type != .audio {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if self.width != 0 {
      try visitor.visitSingularUInt32Field(value: self.width, fieldNumber: 4)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt32Field(value: self.height, fieldNumber: 5)
    }
    if self.muted != false {
      try visitor.visitSingularBoolField(value: self.muted, fieldNumber: 6)
    }
    if self.disableDtx != false {
      try visitor.visitSingularBoolField(value: self.disableDtx, fieldNumber: 7)
    }
    if self.source != .unknown {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 8)
    }
    if !self.layers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.layers, fieldNumber: 9)
    }
    if !self.simulcastCodecs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.simulcastCodecs, fieldNumber: 10)
    }
    if !self.sid.isEmpty {
      try visitor.visitSingularStringField(value: self.sid, fieldNumber: 11)
    }
    if self.stereo != false {
      try visitor.visitSingularBoolField(value: self.stereo, fieldNumber: 12)
    }
    if self.disableRed != false {
      try visitor.visitSingularBoolField(value: self.disableRed, fieldNumber: 13)
    }
    if self.encryption != .none {
      try visitor.visitSingularEnumField(value: self.encryption, fieldNumber: 14)
    }
    if !self.stream.isEmpty {
      try visitor.visitSingularStringField(value: self.stream, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_AddTrackRequest, rhs: Livekit_AddTrackRequest) -> Bool {
    if lhs.cid != rhs.cid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.muted != rhs.muted {return false}
    if lhs.disableDtx != rhs.disableDtx {return false}
    if lhs.source != rhs.source {return false}
    if lhs.layers != rhs.layers {return false}
    if lhs.simulcastCodecs != rhs.simulcastCodecs {return false}
    if lhs.sid != rhs.sid {return false}
    if lhs.stereo != rhs.stereo {return false}
    if lhs.disableRed != rhs.disableRed {return false}
    if lhs.encryption != rhs.encryption {return false}
    if lhs.stream != rhs.stream {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_TrickleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrickleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candidateInit"),
    2: .same(proto: "target"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.candidateInit) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.target) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.candidateInit.isEmpty {
      try visitor.visitSingularStringField(value: self.candidateInit, fieldNumber: 1)
    }
    if self.target != .publisher {
      try visitor.visitSingularEnumField(value: self.target, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_TrickleRequest, rhs: Livekit_TrickleRequest) -> Bool {
    if lhs.candidateInit != rhs.candidateInit {return false}
    if lhs.target != rhs.target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_MuteTrackRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MuteTrackRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sid"),
    2: .same(proto: "muted"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sid) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.muted) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sid.isEmpty {
      try visitor.visitSingularStringField(value: self.sid, fieldNumber: 1)
    }
    if self.muted != false {
      try visitor.visitSingularBoolField(value: self.muted, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_MuteTrackRequest, rhs: Livekit_MuteTrackRequest) -> Bool {
    if lhs.sid != rhs.sid {return false}
    if lhs.muted != rhs.muted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_JoinResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "room"),
    2: .same(proto: "participant"),
    3: .standard(proto: "other_participants"),
    4: .standard(proto: "server_version"),
    5: .standard(proto: "ice_servers"),
    6: .standard(proto: "subscriber_primary"),
    7: .standard(proto: "alternative_url"),
    8: .standard(proto: "client_configuration"),
    9: .standard(proto: "server_region"),
    10: .standard(proto: "ping_timeout"),
    11: .standard(proto: "ping_interval"),
    12: .standard(proto: "server_info"),
    13: .standard(proto: "sif_trailer"),
  ]

  fileprivate class _StorageClass {
    var _room: Livekit_Room? = nil
    var _participant: Livekit_ParticipantInfo? = nil
    var _otherParticipants: [Livekit_ParticipantInfo] = []
    var _serverVersion: String = String()
    var _iceServers: [Livekit_ICEServer] = []
    var _subscriberPrimary: Bool = false
    var _alternativeURL: String = String()
    var _clientConfiguration: Livekit_ClientConfiguration? = nil
    var _serverRegion: String = String()
    var _pingTimeout: Int32 = 0
    var _pingInterval: Int32 = 0
    var _serverInfo: Livekit_ServerInfo? = nil
    var _sifTrailer: Data = Data()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _room = source._room
      _participant = source._participant
      _otherParticipants = source._otherParticipants
      _serverVersion = source._serverVersion
      _iceServers = source._iceServers
      _subscriberPrimary = source._subscriberPrimary
      _alternativeURL = source._alternativeURL
      _clientConfiguration = source._clientConfiguration
      _serverRegion = source._serverRegion
      _pingTimeout = source._pingTimeout
      _pingInterval = source._pingInterval
      _serverInfo = source._serverInfo
      _sifTrailer = source._sifTrailer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._room) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._participant) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._otherParticipants) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._serverVersion) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._iceServers) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._subscriberPrimary) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._alternativeURL) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._clientConfiguration) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._serverRegion) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._pingTimeout) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._pingInterval) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._serverInfo) }()
        case 13: try { try decoder.decodeSingularBytesField(value: &_storage._sifTrailer) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._room {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._participant {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._otherParticipants.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._otherParticipants, fieldNumber: 3)
      }
      if !_storage._serverVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serverVersion, fieldNumber: 4)
      }
      if !_storage._iceServers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._iceServers, fieldNumber: 5)
      }
      if _storage._subscriberPrimary != false {
        try visitor.visitSingularBoolField(value: _storage._subscriberPrimary, fieldNumber: 6)
      }
      if !_storage._alternativeURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._alternativeURL, fieldNumber: 7)
      }
      try { if let v = _storage._clientConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if !_storage._serverRegion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serverRegion, fieldNumber: 9)
      }
      if _storage._pingTimeout != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pingTimeout, fieldNumber: 10)
      }
      if _storage._pingInterval != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pingInterval, fieldNumber: 11)
      }
      try { if let v = _storage._serverInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if !_storage._sifTrailer.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._sifTrailer, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_JoinResponse, rhs: Livekit_JoinResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._room != rhs_storage._room {return false}
        if _storage._participant != rhs_storage._participant {return false}
        if _storage._otherParticipants != rhs_storage._otherParticipants {return false}
        if _storage._serverVersion != rhs_storage._serverVersion {return false}
        if _storage._iceServers != rhs_storage._iceServers {return false}
        if _storage._subscriberPrimary != rhs_storage._subscriberPrimary {return false}
        if _storage._alternativeURL != rhs_storage._alternativeURL {return false}
        if _storage._clientConfiguration != rhs_storage._clientConfiguration {return false}
        if _storage._serverRegion != rhs_storage._serverRegion {return false}
        if _storage._pingTimeout != rhs_storage._pingTimeout {return false}
        if _storage._pingInterval != rhs_storage._pingInterval {return false}
        if _storage._serverInfo != rhs_storage._serverInfo {return false}
        if _storage._sifTrailer != rhs_storage._sifTrailer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_ReconnectResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReconnectResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ice_servers"),
    2: .standard(proto: "client_configuration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.iceServers) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._clientConfiguration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.iceServers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.iceServers, fieldNumber: 1)
    }
    try { if let v = self._clientConfiguration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_ReconnectResponse, rhs: Livekit_ReconnectResponse) -> Bool {
    if lhs.iceServers != rhs.iceServers {return false}
    if lhs._clientConfiguration != rhs._clientConfiguration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_TrackPublishedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackPublishedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cid"),
    2: .same(proto: "track"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._track) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 1)
    }
    try { if let v = self._track {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_TrackPublishedResponse, rhs: Livekit_TrackPublishedResponse) -> Bool {
    if lhs.cid != rhs.cid {return false}
    if lhs._track != rhs._track {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_TrackUnpublishedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackUnpublishedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "track_sid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.trackSid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trackSid.isEmpty {
      try visitor.visitSingularStringField(value: self.trackSid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_TrackUnpublishedResponse, rhs: Livekit_TrackUnpublishedResponse) -> Bool {
    if lhs.trackSid != rhs.trackSid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SessionDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SessionDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "sdp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sdp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.sdp.isEmpty {
      try visitor.visitSingularStringField(value: self.sdp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SessionDescription, rhs: Livekit_SessionDescription) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.sdp != rhs.sdp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_ParticipantUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ParticipantUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "participants"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.participants) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.participants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.participants, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_ParticipantUpdate, rhs: Livekit_ParticipantUpdate) -> Bool {
    if lhs.participants != rhs.participants {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_UpdateSubscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateSubscription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "track_sids"),
    2: .same(proto: "subscribe"),
    3: .standard(proto: "participant_tracks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.trackSids) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.subscribe) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.participantTracks) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trackSids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.trackSids, fieldNumber: 1)
    }
    if self.subscribe != false {
      try visitor.visitSingularBoolField(value: self.subscribe, fieldNumber: 2)
    }
    if !self.participantTracks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.participantTracks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_UpdateSubscription, rhs: Livekit_UpdateSubscription) -> Bool {
    if lhs.trackSids != rhs.trackSids {return false}
    if lhs.subscribe != rhs.subscribe {return false}
    if lhs.participantTracks != rhs.participantTracks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_UpdateTrackSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateTrackSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "track_sids"),
    3: .same(proto: "disabled"),
    4: .same(proto: "quality"),
    5: .same(proto: "width"),
    6: .same(proto: "height"),
    7: .same(proto: "fps"),
    8: .same(proto: "priority"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.trackSids) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.disabled) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.quality) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.width) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.height) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.fps) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.priority) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trackSids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.trackSids, fieldNumber: 1)
    }
    if self.disabled != false {
      try visitor.visitSingularBoolField(value: self.disabled, fieldNumber: 3)
    }
    if self.quality != .low {
      try visitor.visitSingularEnumField(value: self.quality, fieldNumber: 4)
    }
    if self.width != 0 {
      try visitor.visitSingularUInt32Field(value: self.width, fieldNumber: 5)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt32Field(value: self.height, fieldNumber: 6)
    }
    if self.fps != 0 {
      try visitor.visitSingularUInt32Field(value: self.fps, fieldNumber: 7)
    }
    if self.priority != 0 {
      try visitor.visitSingularUInt32Field(value: self.priority, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_UpdateTrackSettings, rhs: Livekit_UpdateTrackSettings) -> Bool {
    if lhs.trackSids != rhs.trackSids {return false}
    if lhs.disabled != rhs.disabled {return false}
    if lhs.quality != rhs.quality {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.fps != rhs.fps {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_LeaveRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LeaveRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "can_reconnect"),
    2: .same(proto: "reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.canReconnect) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.canReconnect != false {
      try visitor.visitSingularBoolField(value: self.canReconnect, fieldNumber: 1)
    }
    if self.reason != .unknownReason {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_LeaveRequest, rhs: Livekit_LeaveRequest) -> Bool {
    if lhs.canReconnect != rhs.canReconnect {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_UpdateVideoLayers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateVideoLayers"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "track_sid"),
    2: .same(proto: "layers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.trackSid) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.layers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trackSid.isEmpty {
      try visitor.visitSingularStringField(value: self.trackSid, fieldNumber: 1)
    }
    if !self.layers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.layers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_UpdateVideoLayers, rhs: Livekit_UpdateVideoLayers) -> Bool {
    if lhs.trackSid != rhs.trackSid {return false}
    if lhs.layers != rhs.layers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_UpdateParticipantMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateParticipantMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.metadata) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metadata.isEmpty {
      try visitor.visitSingularStringField(value: self.metadata, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_UpdateParticipantMetadata, rhs: Livekit_UpdateParticipantMetadata) -> Bool {
    if lhs.metadata != rhs.metadata {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_ICEServer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ICEServer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "urls"),
    2: .same(proto: "username"),
    3: .same(proto: "credential"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.urls) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.credential) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.urls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.urls, fieldNumber: 1)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 2)
    }
    if !self.credential.isEmpty {
      try visitor.visitSingularStringField(value: self.credential, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_ICEServer, rhs: Livekit_ICEServer) -> Bool {
    if lhs.urls != rhs.urls {return false}
    if lhs.username != rhs.username {return false}
    if lhs.credential != rhs.credential {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SpeakersChanged: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpeakersChanged"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "speakers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.speakers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.speakers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.speakers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SpeakersChanged, rhs: Livekit_SpeakersChanged) -> Bool {
    if lhs.speakers != rhs.speakers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_RoomUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoomUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "room"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._room) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._room {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_RoomUpdate, rhs: Livekit_RoomUpdate) -> Bool {
    if lhs._room != rhs._room {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_ConnectionQualityInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionQualityInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "participant_sid"),
    2: .same(proto: "quality"),
    3: .same(proto: "score"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.participantSid) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.quality) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.score) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.participantSid.isEmpty {
      try visitor.visitSingularStringField(value: self.participantSid, fieldNumber: 1)
    }
    if self.quality != .poor {
      try visitor.visitSingularEnumField(value: self.quality, fieldNumber: 2)
    }
    if self.score != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_ConnectionQualityInfo, rhs: Livekit_ConnectionQualityInfo) -> Bool {
    if lhs.participantSid != rhs.participantSid {return false}
    if lhs.quality != rhs.quality {return false}
    if lhs.score != rhs.score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_ConnectionQualityUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionQualityUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "updates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.updates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.updates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.updates, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_ConnectionQualityUpdate, rhs: Livekit_ConnectionQualityUpdate) -> Bool {
    if lhs.updates != rhs.updates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_StreamStateInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StreamStateInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "participant_sid"),
    2: .standard(proto: "track_sid"),
    3: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.participantSid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.trackSid) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.participantSid.isEmpty {
      try visitor.visitSingularStringField(value: self.participantSid, fieldNumber: 1)
    }
    if !self.trackSid.isEmpty {
      try visitor.visitSingularStringField(value: self.trackSid, fieldNumber: 2)
    }
    if self.state != .active {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_StreamStateInfo, rhs: Livekit_StreamStateInfo) -> Bool {
    if lhs.participantSid != rhs.participantSid {return false}
    if lhs.trackSid != rhs.trackSid {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_StreamStateUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StreamStateUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stream_states"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.streamStates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.streamStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.streamStates, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_StreamStateUpdate, rhs: Livekit_StreamStateUpdate) -> Bool {
    if lhs.streamStates != rhs.streamStates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SubscribedQuality: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribedQuality"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "quality"),
    2: .same(proto: "enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.quality) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.quality != .low {
      try visitor.visitSingularEnumField(value: self.quality, fieldNumber: 1)
    }
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SubscribedQuality, rhs: Livekit_SubscribedQuality) -> Bool {
    if lhs.quality != rhs.quality {return false}
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SubscribedCodec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribedCodec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "codec"),
    2: .same(proto: "qualities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.codec) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.qualities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.codec.isEmpty {
      try visitor.visitSingularStringField(value: self.codec, fieldNumber: 1)
    }
    if !self.qualities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.qualities, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SubscribedCodec, rhs: Livekit_SubscribedCodec) -> Bool {
    if lhs.codec != rhs.codec {return false}
    if lhs.qualities != rhs.qualities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SubscribedQualityUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribedQualityUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "track_sid"),
    2: .standard(proto: "subscribed_qualities"),
    3: .standard(proto: "subscribed_codecs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.trackSid) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.subscribedQualities) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.subscribedCodecs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trackSid.isEmpty {
      try visitor.visitSingularStringField(value: self.trackSid, fieldNumber: 1)
    }
    if !self.subscribedQualities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subscribedQualities, fieldNumber: 2)
    }
    if !self.subscribedCodecs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subscribedCodecs, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SubscribedQualityUpdate, rhs: Livekit_SubscribedQualityUpdate) -> Bool {
    if lhs.trackSid != rhs.trackSid {return false}
    if lhs.subscribedQualities != rhs.subscribedQualities {return false}
    if lhs.subscribedCodecs != rhs.subscribedCodecs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_TrackPermission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackPermission"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "participant_sid"),
    2: .standard(proto: "all_tracks"),
    3: .standard(proto: "track_sids"),
    4: .standard(proto: "participant_identity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.participantSid) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.allTracks) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.trackSids) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.participantIdentity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.participantSid.isEmpty {
      try visitor.visitSingularStringField(value: self.participantSid, fieldNumber: 1)
    }
    if self.allTracks != false {
      try visitor.visitSingularBoolField(value: self.allTracks, fieldNumber: 2)
    }
    if !self.trackSids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.trackSids, fieldNumber: 3)
    }
    if !self.participantIdentity.isEmpty {
      try visitor.visitSingularStringField(value: self.participantIdentity, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_TrackPermission, rhs: Livekit_TrackPermission) -> Bool {
    if lhs.participantSid != rhs.participantSid {return false}
    if lhs.allTracks != rhs.allTracks {return false}
    if lhs.trackSids != rhs.trackSids {return false}
    if lhs.participantIdentity != rhs.participantIdentity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SubscriptionPermission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionPermission"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "all_participants"),
    2: .standard(proto: "track_permissions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.allParticipants) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.trackPermissions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.allParticipants != false {
      try visitor.visitSingularBoolField(value: self.allParticipants, fieldNumber: 1)
    }
    if !self.trackPermissions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trackPermissions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SubscriptionPermission, rhs: Livekit_SubscriptionPermission) -> Bool {
    if lhs.allParticipants != rhs.allParticipants {return false}
    if lhs.trackPermissions != rhs.trackPermissions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SubscriptionPermissionUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionPermissionUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "participant_sid"),
    2: .standard(proto: "track_sid"),
    3: .same(proto: "allowed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.participantSid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.trackSid) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.allowed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.participantSid.isEmpty {
      try visitor.visitSingularStringField(value: self.participantSid, fieldNumber: 1)
    }
    if !self.trackSid.isEmpty {
      try visitor.visitSingularStringField(value: self.trackSid, fieldNumber: 2)
    }
    if self.allowed != false {
      try visitor.visitSingularBoolField(value: self.allowed, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SubscriptionPermissionUpdate, rhs: Livekit_SubscriptionPermissionUpdate) -> Bool {
    if lhs.participantSid != rhs.participantSid {return false}
    if lhs.trackSid != rhs.trackSid {return false}
    if lhs.allowed != rhs.allowed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SyncState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SyncState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "answer"),
    2: .same(proto: "subscription"),
    3: .standard(proto: "publish_tracks"),
    4: .standard(proto: "data_channels"),
    5: .same(proto: "offer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._answer) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._subscription) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.publishTracks) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.dataChannels) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._offer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._answer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._subscription {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.publishTracks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.publishTracks, fieldNumber: 3)
    }
    if !self.dataChannels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataChannels, fieldNumber: 4)
    }
    try { if let v = self._offer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SyncState, rhs: Livekit_SyncState) -> Bool {
    if lhs._answer != rhs._answer {return false}
    if lhs._subscription != rhs._subscription {return false}
    if lhs.publishTracks != rhs.publishTracks {return false}
    if lhs.dataChannels != rhs.dataChannels {return false}
    if lhs._offer != rhs._offer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_DataChannelInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataChannelInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "id"),
    3: .same(proto: "target"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.target) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt32Field(value: self.id, fieldNumber: 2)
    }
    if self.target != .publisher {
      try visitor.visitSingularEnumField(value: self.target, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_DataChannelInfo, rhs: Livekit_DataChannelInfo) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.id != rhs.id {return false}
    if lhs.target != rhs.target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SimulateScenario: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SimulateScenario"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "speaker_update"),
    2: .standard(proto: "node_failure"),
    3: .same(proto: "migration"),
    4: .standard(proto: "server_leave"),
    5: .standard(proto: "switch_candidate_protocol"),
    6: .standard(proto: "subscriber_bandwidth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.scenario != nil {try decoder.handleConflictingOneOf()}
          self.scenario = .speakerUpdate(v)
        }
      }()
      case 2: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.scenario != nil {try decoder.handleConflictingOneOf()}
          self.scenario = .nodeFailure(v)
        }
      }()
      case 3: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.scenario != nil {try decoder.handleConflictingOneOf()}
          self.scenario = .migration(v)
        }
      }()
      case 4: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.scenario != nil {try decoder.handleConflictingOneOf()}
          self.scenario = .serverLeave(v)
        }
      }()
      case 5: try {
        var v: Livekit_CandidateProtocol?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.scenario != nil {try decoder.handleConflictingOneOf()}
          self.scenario = .switchCandidateProtocol(v)
        }
      }()
      case 6: try {
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {
          if self.scenario != nil {try decoder.handleConflictingOneOf()}
          self.scenario = .subscriberBandwidth(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.scenario {
    case .speakerUpdate?: try {
      guard case .speakerUpdate(let v)? = self.scenario else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }()
    case .nodeFailure?: try {
      guard case .nodeFailure(let v)? = self.scenario else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case .migration?: try {
      guard case .migration(let v)? = self.scenario else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }()
    case .serverLeave?: try {
      guard case .serverLeave(let v)? = self.scenario else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }()
    case .switchCandidateProtocol?: try {
      guard case .switchCandidateProtocol(let v)? = self.scenario else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }()
    case .subscriberBandwidth?: try {
      guard case .subscriberBandwidth(let v)? = self.scenario else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SimulateScenario, rhs: Livekit_SimulateScenario) -> Bool {
    if lhs.scenario != rhs.scenario {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Ping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "rtt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.rtt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if self.rtt != 0 {
      try visitor.visitSingularInt64Field(value: self.rtt, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_Ping, rhs: Livekit_Ping) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.rtt != rhs.rtt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_Pong: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pong"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_ping_timestamp"),
    2: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.lastPingTimestamp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lastPingTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.lastPingTimestamp, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_Pong, rhs: Livekit_Pong) -> Bool {
    if lhs.lastPingTimestamp != rhs.lastPingTimestamp {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_RegionSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegionSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "regions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.regions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.regions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.regions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_RegionSettings, rhs: Livekit_RegionSettings) -> Bool {
    if lhs.regions != rhs.regions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_RegionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegionInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "region"),
    2: .same(proto: "url"),
    3: .same(proto: "distance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.distance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if self.distance != 0 {
      try visitor.visitSingularInt64Field(value: self.distance, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_RegionInfo, rhs: Livekit_RegionInfo) -> Bool {
    if lhs.region != rhs.region {return false}
    if lhs.url != rhs.url {return false}
    if lhs.distance != rhs.distance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Livekit_SubscriptionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "track_sid"),
    2: .same(proto: "err"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.trackSid) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.err) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trackSid.isEmpty {
      try visitor.visitSingularStringField(value: self.trackSid, fieldNumber: 1)
    }
    if self.err != .seUnknown {
      try visitor.visitSingularEnumField(value: self.err, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Livekit_SubscriptionResponse, rhs: Livekit_SubscriptionResponse) -> Bool {
    if lhs.trackSid != rhs.trackSid {return false}
    if lhs.err != rhs.err {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
